"Pathogen
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

runtime! plugin/sensible.vim

"=========================================
"
"       VIM itself
"
"=========================================

"Auto reload vimrc
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" saved/loaded info
set viminfo=%,'10,f1,/20,:64,n~/.viminfo
"           | |   |  |   |   > viminfo file location
"           | |   |  |   > command history
"           | |   |  > search history
"           | |   > save global marks ('file bookmarks')
"           | > files for which to save marks
"           > buffer list (open files)

"Autosave session
"autocmd CursorHold,CursorHoldI * mksession! $HOME/.vimsessions/auto.vs

"=========================================
"
"       STYYYYYYLE
"
"=========================================

"Terminal Coloring (i.e. Blackmagic I don't understand)
"----------
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
else
    set t_Co=256
    if &term =~ '256color'
        " disable Background Color Erase (BCE) so that color schemes
        "     " render properly when inside 256-color tmux and GNU screen.
        set t_ut=
    endif
endif

"Syntax coloring
"----------
syntax enable
colorscheme solarized8_light
" colorscheme tangoX
" colorscheme Tomorrow
"
" colorscheme Tomorrow-Night
"colorscheme Tomorrow-Night-Eighties
"colorscheme desert
"colorscheme onedark
"colorscheme brogrammer
"colorscheme jellybeans
"colorscheme apprentice
"colorscheme wombat256mod
"colorscheme seoul256
"colorscheme obsidian

set redrawtime=4000

"au BufEnter * exec 'colorscheme '.(&ft=='xml' ? 'Tomorrow-Night' : 'Tomorrow-Night-Eighties')
"au BufEnter * exec 'colorscheme '.(&ft=='cpp' ? 'Tomorrow-Night' : 'Tomorrow-Night-Eighties')

"Set line numbers
set number

"Indentation
"----------
set autoindent
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
"set backspace=indent,eol,start 
set pastetoggle=<F2>

"Display
"----------
"set laststatus=2
set statusline='%F%m%r%h%w\ (%{&ff}){%Y}\ [%l,%v][%p%%]'

"Highlight @ column=X
"----------
highlight ColorColumn ctermbg=darkgray
set colorcolumn=128

"Splitting
"----------
set splitright

"=========================================
"
"       USAGE
"
"=========================================

"Searching
"----------
set ignorecase
set hlsearch
"set incsearch

"Spellcheck
"set spelllang=en

"Timeouts - account for annoying delays in nested tmux
"----------
"set timeoutlen=500
set ttimeoutlen=10

"Folding
"----------
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" change leader key
let mapleader = ","

" escape insert mode
inoremap <Leader>m <Esc>
inoremap <Leader>z <Esc>

"=========================================
"
"       PLUGINS
"
"=========================================

"Syntastic
"------------
" suggested starter settings; some handled by Airline
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_check_on_open = 1

let g:syntastic_loc_list_height=5
let g:syntastic_quiet_messages = { 'type': 'style' }
let g:syntastic_python_checkers = ['prospector', 'flake8']
let g:syntastic_mode_map = { 'mode': 'passive' }
"let g:syntastic_mode_map = { 
"    \ 'mode': 'passive',
"    \ 'active_filetypes': []
"    \}
"let g:syntastic_mode_map = { 
"    \ 'mode': 'active',
"    \ 'passive_filetypes': [] 
"    \ }
"nnoremap <Leader>st :SyntasticToggleMode<CR>


" incsearch
" ---------------------------------------
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" :h g:incsearch#auto_nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 0
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" easymotion + incsearch
" ---------------------------------------
map z/ <Plug>(incsearch-easymotion-/)
map z? <Plug>(incsearch-easymotion-?)
map zg/ <Plug>(incsearch-easymotion-stay)

" Ctags
" --------------------------
"
" Tell vim where to look for tags, i.e. .tags in pwd, or up until HOME
set tags=./.tags,.tags;$HOME

" Open tag in this tab
nnoremap <silent><Leader>. <C-]>
" Open tag in new tab
nnoremap <silent><Leader>t <C-w><C-]><C-w>T
" Open tag in vsplit window
nnoremap <silent><Leader>s :vsplit <CR>:exec("tag ".expand("<cword>"))<CR>
" Preview tag in new window
nnoremap <silent><Leader>w <C-w>}
" Open tag in new tab; list options for multiple matches
nnoremap tj g<C-]>

" Toggle Tagbar
nnoremap <silent> <Leader>b :TagbarToggle<CR>
" Open Tagbar on left
let g:tagbar_left = 1

" open Ctrl-P tag search
nnoremap <Leader>p :CtrlPTag<CR>
" Open Ctrl-P tag; search for current word
nmap <Leader>pc :CtrlPTag<CR><C-\>w
" CtrlP searches up until it find this
let g:ctrlp_root_markers=".tags"

" FZF
" --------------------------
"  point to install
set rtp+=/usr/local/opt/fzf
" use ctags
let g:fzf_tags_command = 'ctags --tag-relative -f .tags -R --extra=+f'
" use current color scheme
let g:fzf_colors =
            \ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" search files, tags, ag
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>ft :Tags<CR>
nnoremap <Leader>fa :Ag<CR>
" search files, tags, ag for current word
"nnoremap <silent> <Leader>f :Files <C-R><C-W><CR>
nnoremap <silent> <Leader>fc :Tags <C-R><C-W><CR>
nnoremap <silent> <Leader>ac :Ag <C-R><C-W><CR>


" Ack
" --------------------------
"  use ag
if executable('ag')
      let g:ackprg = 'ag --vimgrep'
endif
" don't jump to first result automatically
"cnoreabbrev Ack Ack!
"nnoremap <Leader>a :Ack!<Space>

" Airline
" --------------------------
set noshowmode
let g:airline_powerline_fonts = 1
" maybe fix width issue?
" set ambiwidth=double
"let g:airline_powerline_fonts = 0
"let g:airline_symbols_ascii = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
"let g:airline#extensions#tabline#buffer_nr_show = 1

"themes
let g:airline_theme='tomorrow'
"let g:airline_theme='deus'
"let g:airline_theme='understated'
"let g:airline_theme='bubblegum'
"let g:airline_theme='base16'
"let g:airline_theme='simple'
"let g:airline_theme='luna'
"let g:airline_theme='solarized'
"let g:airline_solarized_bg='dark'

" ALE
"------------
let g:ale_enabled = 0
let g:airline#extensions#ale#enabled = 0
let g:ale_completion_enabled = 1
let g:ale_linters = {'python': ['prospector'], 'cpp': ['clang']}
let g:ale_cpp_clang_options = '-std=c++17'
let g:ale_cpp_gcc_options = '-std=c++17'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0 "on file-open


" Commentary
"------------
autocmd FileType c,cpp,cs,java setlocal commentstring=//\ %s


"=========================================
"
"       CUSTOM COMMANDS
"
"=========================================

"  Run a shell command and show the results in a separate window
" --------------------------
function! s:ExecuteInShell(command)
  let command = join(map(split(a:command), 'expand(v:val)'))
  let winnr = bufwinnr('^' . command . '$')
  silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
  setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  echo 'Execute ' . command . '...'
  silent! execute 'silent %!'. command
  silent! execute 'resize ' . line('$')
  silent! redraw
  silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  echo 'Shell command ' . command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)

" typos
command! E :edit!

" lint python
" --------------------------
command! Flake  % !python3 -m pyflakes
command! Flake2 % !python2 -m pyflakes

" pretty-print json
" --------------------------
command! Jsonify % !python -m json.tool

" open pdf
" --------------------------
:command! -complete=file -nargs=1 Openpdf :r !pdftotext -nopgbrk <q-args> - |fmt -csw78

"  Jinja templates
" --------------------------
"  Convert 'command' to '{% command %}'
command! Jinjafy :normal I {% <Esc>A %} <Esc>
"nnoremap jn :Jinjafy<CR>

"  Copy/Paste 
" --------------------------
" Copy contents of file onto system clipboard
command CopyAllClip :%y+
" Copy contents of file into register 'a'
command CopyAll :normal gg"ayG
" Paste content of register 'a', overwriting existing content
command PasteAway :%d | :put! a

" Don't auto-indent when pasting
function! WrapForTmux(s)
    if !exists('$TMUX')
        return a:s
    endif

    let tmux_start = "\<Esc>Ptmux;"
    let tmux_end = "\<Esc>\\"

    return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()


"  Sundry mappings
" --------------------------
" edit this file
nnoremap <Leader>v :tabe $HOME/.vimrc<CR>

" refresh airline (mostly after autoreload of vimrc)
nnoremap <Leader>1 :AirlineRefresh<CR>

" save session
nnoremap <silent><Leader>ms :mksession! $HOME/.vimsessions/default.vs<CR>

" quit all without saving
nnoremap QQ :qa!<CR>

" insert a newline
nnoremap <Leader>n i<CR><Esc>

"=========================================
"
"       TOOL MACROS
"
"=========================================

"  Rust
" --------------------------
"nnoremap mc :Shell cargo check <CR>
"nnoremap mr :Shell cargo run <CR>
"nnoremap mb :Shell cargo build <CR>


" Grep-ing
" --------------------------
"nnoremap Gr :grep <cword> %:p:h/*<CR>
"nnoremap GR :grep '\b<cword>\b' %:p:h/*<CR>
nnoremap gr :grep -r <cword> *<CR>
nnoremap gR :grep -r '\b<cword>\b' *<CR>


"=========================================
"
"       Resizing and Movement
"
"=========================================
nnoremap <Leader>H :vertical resize -10<CR>
nnoremap <Leader>L :vertical resize +10<CR>
nnoremap <Leader>J :resize -10<CR>
nnoremap <Leader>K :resize +10<CR>

nnoremap <Leader>r <C-^>
